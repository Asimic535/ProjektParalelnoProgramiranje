import random
import time
from multiprocessing import Pool, cpu_count

def compare_and_swap(arr, i, j, direction):
    if (direction == 1 and arr[i] > arr[j]) or (direction == 0 and arr[i] < arr[j]):
        arr[i], arr[j] = arr[j], arr[i]

def bitonic_merge(arr, direction):
    if len(arr) <= 1:
        return arr
    else:
        k = len(arr) // 2
        for i in range(k):
            compare_and_swap(arr, i, i + k, direction)
        first = bitonic_merge(arr[:k], direction)
        second = bitonic_merge(arr[k:], direction)
        return first + second

def bitonic_sort(arr, direction):
    if len(arr) <= 1:
        return arr
    else:
        k = len(arr) // 2
        first = bitonic_sort(arr[:k], 1)  # Ascending
        second = bitonic_sort(arr[k:], 0)  # Descending
        merged = bitonic_merge(first + second, direction)
        return merged

def parallel_sort_worker(args):
    arr, direction = args
    return bitonic_sort(arr, direction)

def parallel_bitonic_sort(arr, max_processes):
    size = len(arr)
    num_chunks = max_processes
    chunk_size = size // num_chunks
    chunks = [arr[i*chunk_size:(i+1)*chunk_size] for i in range(num_chunks)]

    # Svaka polovina u ascending ili descending smjeru
    directions = [1 if i % 2 == 0 else 0 for i in range(num_chunks)]
    inputs = list(zip(chunks, directions))

    with Pool(processes=max_processes) as pool:
        sorted_chunks = pool.map(parallel_sort_worker, inputs)

    # Serijski spajamo (bitonic merge) sve sortirane blokove
    while len(sorted_chunks) > 1:
        merged_chunks = []
        for i in range(0, len(sorted_chunks), 2):
            if i + 1 < len(sorted_chunks):
                combined = sorted_chunks[i] + sorted_chunks[i+1]
                direction = 1  # uvijek spajamo uzlazno
                merged = bitonic_merge(combined, direction)
                merged_chunks.append(merged)
            else:
                merged_chunks.append(sorted_chunks[i])
        sorted_chunks = merged_chunks

    return sorted_chunks[0]

# Glavni dio
if __name__ == "__main__":
    potencija = 20      # 2^20 = 1,048,576
    brojeva = 2 ** potencija
    arr = [random.randint(0, 10**6) for _ in range(brojeva)]
    jezgri = 16

    start = time.time()
    sorted_arr = parallel_bitonic_sort(arr, jezgri)
    end = time.time()

    poretklo_vrijeme = end - start
    print(f"Vrijeme sortiranja: {end - start:.3f} sekundi")
    print("Prvih 10 elemenata sortiranog niza:", sorted_arr[:10])
